letter:  A | B | C | D | E | F | G
       | H | I | J | K | L | M | N
       | O | P | Q | R | S | T | U
       | V | W | X | Y | Z | a | b
       | c | d | e | f | g | h | i
       | j | k | l | m | n | o | p
       | q | r | s | t | u | v | w
       | x | y | z ;

symbol: _ | ? | ! | *
digit_excluding_zero: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ;
bool: true | false
digit: 0 | digit_excluding_zero;
natural_number: digit_excluding_zero, { digit }* ;
integer: 0 | [ - ], natural_number
floating_number: integer, . , {digit}+
number: integer | floating_number
string: string_delimitator, {letter | digit}*, string_delimitator
string_delimitator: "

operator_arithm: + | - | * | /
operator_comp: =[=] | >[=] | <[=]
not_binary_operator = not
binary_operator = and | or
operator_bool = not_binary_operator | binary_operator
punctuation: ( | ) | { | } | ;
keywords: lambda | if | return | else | and | not | or | true | false

identifier: letter , { letter | digit | symbol }* ;
parameters: (, [varargslist], )
varargslist: [identifier]*
func_def: lambda, parameters, {, block, }

if_statement: if, pred, {, block, }, [else, {, block, }]
pred: expr, operator_comp, expr | pred, binary_operator, pred | not_binary_operator, pred
variable_def: identifier, =, value
value: number | string | bool | func_def | expr
expr_arithm: expr, operator_arithm, expr | value
function_call: identifier, (, [value | identifier]*, ),
expr: expr_arithm | pred | if_statement | function_call
